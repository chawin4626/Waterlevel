#include <Wire.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <DHT.h>
#include <HTTPClient.h>
#include <WiFiManager.h>

// üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Token ‡πÅ‡∏•‡∏∞ Chat ID ‡∏Ç‡∏≠‡∏á Telegram
const char* botToken = "7906423188:AAFHSSdArBM-kN-z3ahe1O7iaZTEdAtgYvY";
const char* chatID = "-4747374637";

// Blynk credentials
const char auth[] = "WhD5_ktf1r9jUnedHYIeNIp3Z6pFL3J_";

// GPIO Configuration 
#define TRIG_PIN 5      
#define ECHO_PIN 18     
#define DHT_PIN 15      
#define DHT_TYPE DHT22  

DHT dht(DHT_PIN, DHT_TYPE);

// üîπ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
float waterLevelThreshold = 15.0; 
float tempThreshold = 30.0;
float humidityThreshold = 40.0;

// üîπ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥ (Cooldown)
unsigned long lastTelegramSent = 0;
#define TELEGRAM_COOLDOWN 60000 // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ

float measureWaterLevel() {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    float duration = pulseIn(ECHO_PIN, HIGH);
    float distance = (duration * 0.0343) / 2;
    return distance;
}

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram
void sendTelegramMessage(String alertType, float value) {
    if (WiFi.status() != WL_CONNECTED) return;
    if (millis() - lastTelegramSent < TELEGRAM_COOLDOWN) return;

    HTTPClient http;
    http.begin("https://api.telegram.org/bot" + String(botToken) + "/sendMessage");
    http.addHeader("Content-Type", "application/json");

    String message = "{\"chat_id\":\"" + String(chatID) + "\",\"text\":\"üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: " + alertType + "\n‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " + String(value) + "\"}";

    http.POST(message);
    http.end();
    
    lastTelegramSent = millis();
}

void setupWiFi() {
  WiFiManager wifiManager;
  //‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Hotspot ‡πÄ‡∏õ‡πá‡∏ô ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÄ‡∏ä‡πà‡∏ô Sompoch_MiniProject
  wifiManager.autoConnect("Waterlaevel_IOT");  // ‡πÄ‡∏õ‡∏¥‡∏î Hotspot ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Wi-Fi ‡πÄ‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
  Serial.println("‚úÖ Wi-Fi Connected!");
}

void setup() {
    Serial.begin(9600);
    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);
    dht.begin();

    setupWiFi();
    Serial.println("Connecting to Blynk server...");
    Blynk.begin(auth, WiFi.SSID().c_str(), WiFi.psk().c_str(), "iotservices.thddns.net", 5535);
}

BLYNK_CONNECTED() {
    Serial.println("Blynk connected!");
    Blynk.syncAll();
}

// Slider ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
BLYNK_WRITE(V4) {  
    tempThreshold = param.asFloat();
    Serial.print("üõ† ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏õ‡πá‡∏ô: ");
    Serial.print(tempThreshold);
    Serial.println("¬∞C");
}

// Slider ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
BLYNK_WRITE(V5) {  
    humidityThreshold = param.asFloat();
    Serial.print("üõ† ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô: ");
    Serial.print(humidityThreshold);
    Serial.println("%");
}

// Slider ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏Å‡∏ñ‡∏±‡∏á
BLYNK_WRITE(V6) {  
    waterLevelThreshold = param.asFloat();
    Serial.print("üõ† ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ");
    Serial.print(waterLevelThreshold);
    Serial.println(" cm");
}

void loop() {
    if (Blynk.connected()) {
        Blynk.run();
    }

    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    float waterLevel = measureWaterLevel();

    if (!isnan(temperature) && !isnan(humidity)) {
        Blynk.virtualWrite(V1, temperature);
        Blynk.virtualWrite(V2, humidity);
        Blynk.virtualWrite(V3, waterLevel);
        Serial.printf("‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: %.2f ¬∞C, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: %.2f %%, ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥: %.2f cm\n", 
                      temperature, humidity, waterLevel);

        // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        if (waterLevel > waterLevelThreshold) {
            sendTelegramMessage("‚ö†Ô∏è‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏Å‡∏ñ‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î", waterLevel);
        }
        if (temperature > tempThreshold) {
            sendTelegramMessage("üå°‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏´‡∏ô‡∏î", temperature);
        }
        if (humidity < humidityThreshold) {
            sendTelegramMessage("üíß‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î", humidity);
        }
    }
    delay(1000);
}

// üîπ ‡∏õ‡∏£‡∏±‡∏ö reconnectWiFi() ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ WiFiManager
void reconnectWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("üîÑ Reconnecting Wi-Fi...");
    WiFiManager wifiManager;
    wifiManager.autoConnect("ESP32_Config");  // ‡πÄ‡∏õ‡∏¥‡∏î AP ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Wi-Fi ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏∏‡∏î
    Serial.println("‚úÖ Wi-Fi Reconnected!");
  }
}
